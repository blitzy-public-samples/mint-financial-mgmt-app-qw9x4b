import numpy as np
import pandas as pd
from typing import Dict, Any
from ..models.investment_recommendation import InvestmentRecommendationModel
from ..config.model_config import INVESTMENT_RECOMMENDATION_MODEL

class InvestmentRecommender:
    """
    A class that encapsulates the investment recommendation inference process,
    including loading the trained model and generating recommendations.
    """

    def __init__(self, model_path: str):
        """
        Initializes the InvestmentRecommender by loading the trained model.

        Args:
            model_path (str): The path to the trained model file.
        """
        self.model = InvestmentRecommendationModel()
        self.model.load(model_path)

    def recommend(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generates investment recommendations based on user data.

        Args:
            user_data (Dict[str, Any]): A dictionary containing user financial information.

        Returns:
            Dict[str, Any]: Recommended investment allocation.
        """
        if not self.validate_user_data(user_data):
            raise ValueError("Invalid user data provided.")

        preprocessed_data = self._preprocess_user_data(user_data)
        model_output = self.model.predict(preprocessed_data)
        recommendations = self._postprocess_model_output(model_output)

        return recommendations

    def explain_recommendation(self, user_data: Dict[str, Any], recommendation: Dict[str, Any]) -> str:
        """
        Provides an explanation for the generated investment recommendation.

        Args:
            user_data (Dict[str, Any]): A dictionary containing user financial information.
            recommendation (Dict[str, Any]): The investment recommendation generated by the model.

        Returns:
            str: Explanation of the investment recommendation.
        """
        # Analyze the user_data and recommendation
        risk_profile = self._assess_risk_profile(user_data)
        key_factors = self._identify_key_factors(user_data, recommendation)

        # Generate a human-readable explanation
        explanation = f"Based on your risk profile of {risk_profile}, we recommend the following investment allocation:\n\n"
        for asset_class, percentage in recommendation.items():
            explanation += f"- {asset_class}: {percentage:.2f}%\n"

        explanation += "\nKey factors influencing this recommendation:\n"
        for factor, impact in key_factors.items():
            explanation += f"- {factor}: {impact}\n"

        return explanation

    def validate_user_data(self, user_data: Dict[str, Any]) -> bool:
        """
        Validates the user data to ensure it contains all required fields and correct data types.

        Args:
            user_data (Dict[str, Any]): A dictionary containing user financial information.

        Returns:
            bool: True if valid, False otherwise.
        """
        required_fields = ['age', 'income', 'savings', 'risk_tolerance', 'investment_horizon']
        
        # Check if all required fields are present
        if not all(field in user_data for field in required_fields):
            return False

        # Validate data types and ranges
        try:
            assert isinstance(user_data['age'], int) and 18 <= user_data['age'] <= 100
            assert isinstance(user_data['income'], (int, float)) and user_data['income'] >= 0
            assert isinstance(user_data['savings'], (int, float)) and user_data['savings'] >= 0
            assert isinstance(user_data['risk_tolerance'], int) and 1 <= user_data['risk_tolerance'] <= 10
            assert isinstance(user_data['investment_horizon'], int) and user_data['investment_horizon'] > 0
        except AssertionError:
            return False

        return True

    def _preprocess_user_data(self, user_data: Dict[str, Any]) -> pd.DataFrame:
        """
        Preprocesses the user data for investment recommendation.

        Args:
            user_data (Dict[str, Any]): A dictionary containing user financial information.

        Returns:
            pd.DataFrame: Preprocessed user data.
        """
        df = pd.DataFrame([user_data])
        
        # Perform feature engineering
        df['income_to_savings_ratio'] = df['income'] / df['savings']
        df['risk_score'] = df['risk_tolerance'] * df['investment_horizon'] / df['age']

        # Normalize numerical features
        numerical_features = ['age', 'income', 'savings', 'income_to_savings_ratio', 'risk_score']
        df[numerical_features] = (df[numerical_features] - df[numerical_features].mean()) / df[numerical_features].std()

        return df

    def _postprocess_model_output(self, model_output: np.ndarray) -> Dict[str, float]:
        """
        Post-processes the model output to generate human-readable recommendations.

        Args:
            model_output (np.ndarray): The raw output from the model.

        Returns:
            Dict[str, float]: Recommended investment allocation.
        """
        asset_classes = ['Stocks', 'Bonds', 'Real Estate', 'Commodities', 'Cash']
        recommendations = dict(zip(asset_classes, model_output[0] * 100))
        return {k: round(v, 2) for k, v in recommendations.items()}

    def _assess_risk_profile(self, user_data: Dict[str, Any]) -> str:
        """
        Assesses the user's risk profile based on their data.

        Args:
            user_data (Dict[str, Any]): A dictionary containing user financial information.

        Returns:
            str: A description of the user's risk profile.
        """
        risk_score = user_data['risk_tolerance'] * user_data['investment_horizon'] / user_data['age']
        if risk_score < 2:
            return "Conservative"
        elif risk_score < 5:
            return "Moderate"
        else:
            return "Aggressive"

    def _identify_key_factors(self, user_data: Dict[str, Any], recommendation: Dict[str, Any]) -> Dict[str, str]:
        """
        Identifies key factors influencing the investment recommendation.

        Args:
            user_data (Dict[str, Any]): A dictionary containing user financial information.
            recommendation (Dict[str, Any]): The investment recommendation generated by the model.

        Returns:
            Dict[str, str]: Key factors and their impact on the recommendation.
        """
        factors = {}
        if recommendation['Stocks'] > 50:
            factors['High stock allocation'] = "Your risk tolerance and long investment horizon"
        elif recommendation['Bonds'] > 40:
            factors['High bond allocation'] = "Your conservative risk profile and shorter investment horizon"
        
        if user_data['age'] < 30:
            factors['Age'] = "Your young age allows for more aggressive investments"
        elif user_data['age'] > 60:
            factors['Age'] = "Your age suggests a more conservative approach"

        return factors

def load_investment_recommender() -> InvestmentRecommender:
    """
    Loads and returns an instance of InvestmentRecommender with the trained model.

    Returns:
        InvestmentRecommender: An instance of InvestmentRecommender.
    """
    model_path = INVESTMENT_RECOMMENDATION_MODEL['path']
    return InvestmentRecommender(model_path)

def preprocess_user_data(user_data: Dict[str, Any]) -> pd.DataFrame:
    """
    Preprocesses the user data for investment recommendation.

    Args:
        user_data (Dict[str, Any]): A dictionary containing user financial information.

    Returns:
        pd.DataFrame: Preprocessed user data.
    """
    return InvestmentRecommender("")._preprocess_user_data(user_data)

# Human tasks:
# TODO: Implement comprehensive error handling and logging
# TODO: Develop unit tests for the InvestmentRecommender class and utility functions
# TODO: Implement caching mechanism for frequent recommendation requests
# TODO: Integrate with a monitoring system to track model performance in production
# TODO: Implement A/B testing framework for comparing different recommendation models